"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_1 = require("grpc");
const account_info_pb_1 = require("./generated/node/rpc/v1/account_info_pb");
const fee_pb_1 = require("./generated/node/rpc/v1/fee_pb");
const tx_pb_1 = require("./generated/node/rpc/v1/tx_pb");
const submit_pb_1 = require("./generated/node/rpc/v1/submit_pb");
const xrp_ledger_grpc_pb_1 = require("./generated/node/rpc/v1/xrp_ledger_grpc_pb");
const amount_pb_1 = require("./generated/node/rpc/v1/amount_pb");
const utils_1 = __importDefault(require("./utils"));
/**
 * A GRPC Based network client.
 */
class GRPCNetworkClient {
    constructor(grpcURL) {
        if (utils_1.default()) {
            this.grpcClient = new xrp_ledger_grpc_pb_1.XRPLedgerAPIServiceClient(grpcURL, grpc_1.credentials.createInsecure());
        }
        else {
            throw new Error('Use gRPC-Web Network Client on the browser!');
        }
    }
    async getAccountInfo(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getAccountInfo(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async getFee(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getFee(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async getTx(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getTx(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async submitTransaction(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.submitTransaction(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    /* eslint-disable class-methods-use-this */
    AccountAddress() {
        return new amount_pb_1.AccountAddress();
    }
    GetAccountInfoRequest() {
        return new account_info_pb_1.GetAccountInfoRequest();
    }
    GetTxRequest() {
        return new tx_pb_1.GetTxRequest();
    }
    GetFeeRequest() {
        return new fee_pb_1.GetFeeRequest();
    }
    SubmitTransactionRequest() {
        return new submit_pb_1.SubmitTransactionRequest();
    }
}
exports.default = GRPCNetworkClient;
//# sourceMappingURL=grpc-network-client.js.map