import * as jspb from "google-protobuf"

import * as rpc_v1_ledger_objects_pb from '../../rpc/v1/ledger_objects_pb';
import * as rpc_v1_amount_pb from '../../rpc/v1/amount_pb';

export class GetAccountInfoRequest extends jspb.Message {
  getAccount(): rpc_v1_amount_pb.AccountAddress | undefined;
  setAccount(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasAccount(): boolean;
  clearAccount(): void;

  getStrict(): boolean;
  setStrict(value: boolean): void;

  getLedger(): LedgerSpecifier | undefined;
  setLedger(value?: LedgerSpecifier): void;
  hasLedger(): boolean;
  clearLedger(): void;

  getQueue(): boolean;
  setQueue(value: boolean): void;

  getSignerLists(): boolean;
  setSignerLists(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAccountInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetAccountInfoRequest): GetAccountInfoRequest.AsObject;
  static serializeBinaryToWriter(message: GetAccountInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAccountInfoRequest;
  static deserializeBinaryFromReader(message: GetAccountInfoRequest, reader: jspb.BinaryReader): GetAccountInfoRequest;
}

export namespace GetAccountInfoRequest {
  export type AsObject = {
    account?: rpc_v1_amount_pb.AccountAddress.AsObject,
    strict: boolean,
    ledger?: LedgerSpecifier.AsObject,
    queue: boolean,
    signerLists: boolean,
  }
}

export class LedgerSpecifier extends jspb.Message {
  getShortcut(): LedgerSpecifier.Shortcut;
  setShortcut(value: LedgerSpecifier.Shortcut): void;

  getSequence(): number;
  setSequence(value: number): void;

  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;

  getLedgerCase(): LedgerSpecifier.LedgerCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LedgerSpecifier.AsObject;
  static toObject(includeInstance: boolean, msg: LedgerSpecifier): LedgerSpecifier.AsObject;
  static serializeBinaryToWriter(message: LedgerSpecifier, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LedgerSpecifier;
  static deserializeBinaryFromReader(message: LedgerSpecifier, reader: jspb.BinaryReader): LedgerSpecifier;
}

export namespace LedgerSpecifier {
  export type AsObject = {
    shortcut: LedgerSpecifier.Shortcut,
    sequence: number,
    hash: Uint8Array | string,
  }

  export enum Shortcut { 
    SHORTCUT_UNSPECIFIED = 0,
    SHORTCUT_VALIDATED = 1,
    SHORTCUT_CLOSED = 2,
    SHORTCUT_CURRENT = 3,
  }

  export enum LedgerCase { 
    LEDGER_NOT_SET = 0,
    SHORTCUT = 1,
    SEQUENCE = 2,
    HASH = 3,
  }
}

export class GetAccountInfoResponse extends jspb.Message {
  getAccountData(): rpc_v1_ledger_objects_pb.AccountRoot | undefined;
  setAccountData(value?: rpc_v1_ledger_objects_pb.AccountRoot): void;
  hasAccountData(): boolean;
  clearAccountData(): void;

  getSignerList(): rpc_v1_ledger_objects_pb.SignerList | undefined;
  setSignerList(value?: rpc_v1_ledger_objects_pb.SignerList): void;
  hasSignerList(): boolean;
  clearSignerList(): void;

  getLedgerIndex(): number;
  setLedgerIndex(value: number): void;

  getQueueData(): QueueData | undefined;
  setQueueData(value?: QueueData): void;
  hasQueueData(): boolean;
  clearQueueData(): void;

  getValidated(): boolean;
  setValidated(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAccountInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetAccountInfoResponse): GetAccountInfoResponse.AsObject;
  static serializeBinaryToWriter(message: GetAccountInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAccountInfoResponse;
  static deserializeBinaryFromReader(message: GetAccountInfoResponse, reader: jspb.BinaryReader): GetAccountInfoResponse;
}

export namespace GetAccountInfoResponse {
  export type AsObject = {
    accountData?: rpc_v1_ledger_objects_pb.AccountRoot.AsObject,
    signerList?: rpc_v1_ledger_objects_pb.SignerList.AsObject,
    ledgerIndex: number,
    queueData?: QueueData.AsObject,
    validated: boolean,
  }
}

export class QueueData extends jspb.Message {
  getTxnCount(): number;
  setTxnCount(value: number): void;

  getAuthChangeQueued(): boolean;
  setAuthChangeQueued(value: boolean): void;

  getLowestSequence(): number;
  setLowestSequence(value: number): void;

  getHighestSequence(): number;
  setHighestSequence(value: number): void;

  getMaxSpendDropsTotal(): rpc_v1_amount_pb.XRPDropsAmount | undefined;
  setMaxSpendDropsTotal(value?: rpc_v1_amount_pb.XRPDropsAmount): void;
  hasMaxSpendDropsTotal(): boolean;
  clearMaxSpendDropsTotal(): void;

  getTransactionsList(): Array<QueuedTransaction>;
  setTransactionsList(value: Array<QueuedTransaction>): void;
  clearTransactionsList(): void;
  addTransactions(value?: QueuedTransaction, index?: number): QueuedTransaction;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueueData.AsObject;
  static toObject(includeInstance: boolean, msg: QueueData): QueueData.AsObject;
  static serializeBinaryToWriter(message: QueueData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueueData;
  static deserializeBinaryFromReader(message: QueueData, reader: jspb.BinaryReader): QueueData;
}

export namespace QueueData {
  export type AsObject = {
    txnCount: number,
    authChangeQueued: boolean,
    lowestSequence: number,
    highestSequence: number,
    maxSpendDropsTotal?: rpc_v1_amount_pb.XRPDropsAmount.AsObject,
    transactionsList: Array<QueuedTransaction.AsObject>,
  }
}

export class QueuedTransaction extends jspb.Message {
  getAuthChange(): boolean;
  setAuthChange(value: boolean): void;

  getFee(): rpc_v1_amount_pb.XRPDropsAmount | undefined;
  setFee(value?: rpc_v1_amount_pb.XRPDropsAmount): void;
  hasFee(): boolean;
  clearFee(): void;

  getFeeLevel(): number;
  setFeeLevel(value: number): void;

  getMaxSpendDrops(): rpc_v1_amount_pb.XRPDropsAmount | undefined;
  setMaxSpendDrops(value?: rpc_v1_amount_pb.XRPDropsAmount): void;
  hasMaxSpendDrops(): boolean;
  clearMaxSpendDrops(): void;

  getSequence(): number;
  setSequence(value: number): void;

  getLastLedgerSequence(): number;
  setLastLedgerSequence(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueuedTransaction.AsObject;
  static toObject(includeInstance: boolean, msg: QueuedTransaction): QueuedTransaction.AsObject;
  static serializeBinaryToWriter(message: QueuedTransaction, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueuedTransaction;
  static deserializeBinaryFromReader(message: QueuedTransaction, reader: jspb.BinaryReader): QueuedTransaction;
}

export namespace QueuedTransaction {
  export type AsObject = {
    authChange: boolean,
    fee?: rpc_v1_amount_pb.XRPDropsAmount.AsObject,
    feeLevel: number,
    maxSpendDrops?: rpc_v1_amount_pb.XRPDropsAmount.AsObject,
    sequence: number,
    lastLedgerSequence: number,
  }
}

