/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.rpc.v1.AccountAddress', null, global);
goog.exportSymbol('proto.rpc.v1.Currency', null, global);
goog.exportSymbol('proto.rpc.v1.CurrencyAmount', null, global);
goog.exportSymbol('proto.rpc.v1.IssuedCurrencyAmount', null, global);
goog.exportSymbol('proto.rpc.v1.XRPDropsAmount', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.CurrencyAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.v1.CurrencyAmount.oneofGroups_);
};
goog.inherits(proto.rpc.v1.CurrencyAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.CurrencyAmount.displayName = 'proto.rpc.v1.CurrencyAmount';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.v1.CurrencyAmount.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rpc.v1.CurrencyAmount.AmountCase = {
  AMOUNT_NOT_SET: 0,
  XRP_AMOUNT: 1,
  ISSUED_CURRENCY_AMOUNT: 2
};

/**
 * @return {proto.rpc.v1.CurrencyAmount.AmountCase}
 */
proto.rpc.v1.CurrencyAmount.prototype.getAmountCase = function() {
  return /** @type {proto.rpc.v1.CurrencyAmount.AmountCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.CurrencyAmount.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.CurrencyAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.CurrencyAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.CurrencyAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.CurrencyAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    xrpAmount: (f = msg.getXrpAmount()) && proto.rpc.v1.XRPDropsAmount.toObject(includeInstance, f),
    issuedCurrencyAmount: (f = msg.getIssuedCurrencyAmount()) && proto.rpc.v1.IssuedCurrencyAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.CurrencyAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.CurrencyAmount;
  return proto.rpc.v1.CurrencyAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.CurrencyAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.CurrencyAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.v1.XRPDropsAmount;
      reader.readMessage(value,proto.rpc.v1.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setXrpAmount(value);
      break;
    case 2:
      var value = new proto.rpc.v1.IssuedCurrencyAmount;
      reader.readMessage(value,proto.rpc.v1.IssuedCurrencyAmount.deserializeBinaryFromReader);
      msg.setIssuedCurrencyAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.CurrencyAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.CurrencyAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.CurrencyAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.CurrencyAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXrpAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.v1.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getIssuedCurrencyAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.v1.IssuedCurrencyAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional XRPDropsAmount xrp_amount = 1;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.CurrencyAmount.prototype.getXrpAmount = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.XRPDropsAmount, 1));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.CurrencyAmount.prototype.setXrpAmount = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rpc.v1.CurrencyAmount.oneofGroups_[0], value);
};


proto.rpc.v1.CurrencyAmount.prototype.clearXrpAmount = function() {
  this.setXrpAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.CurrencyAmount.prototype.hasXrpAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IssuedCurrencyAmount issued_currency_amount = 2;
 * @return {?proto.rpc.v1.IssuedCurrencyAmount}
 */
proto.rpc.v1.CurrencyAmount.prototype.getIssuedCurrencyAmount = function() {
  return /** @type{?proto.rpc.v1.IssuedCurrencyAmount} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.IssuedCurrencyAmount, 2));
};


/** @param {?proto.rpc.v1.IssuedCurrencyAmount|undefined} value */
proto.rpc.v1.CurrencyAmount.prototype.setIssuedCurrencyAmount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rpc.v1.CurrencyAmount.oneofGroups_[0], value);
};


proto.rpc.v1.CurrencyAmount.prototype.clearIssuedCurrencyAmount = function() {
  this.setIssuedCurrencyAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.CurrencyAmount.prototype.hasIssuedCurrencyAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.XRPDropsAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.XRPDropsAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.XRPDropsAmount.displayName = 'proto.rpc.v1.XRPDropsAmount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.XRPDropsAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.XRPDropsAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.XRPDropsAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.XRPDropsAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    drops: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.XRPDropsAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.XRPDropsAmount;
  return proto.rpc.v1.XRPDropsAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.XRPDropsAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.XRPDropsAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDrops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.XRPDropsAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.XRPDropsAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.XRPDropsAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.XRPDropsAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrops();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 drops = 1;
 * @return {number}
 */
proto.rpc.v1.XRPDropsAmount.prototype.getDrops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpc.v1.XRPDropsAmount.prototype.setDrops = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.AccountAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.AccountAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.AccountAddress.displayName = 'proto.rpc.v1.AccountAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.AccountAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.AccountAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.AccountAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.AccountAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.AccountAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.AccountAddress;
  return proto.rpc.v1.AccountAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.AccountAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.AccountAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.AccountAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.AccountAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.AccountAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rpc.v1.AccountAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpc.v1.AccountAddress.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.IssuedCurrencyAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.IssuedCurrencyAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.IssuedCurrencyAmount.displayName = 'proto.rpc.v1.IssuedCurrencyAmount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.IssuedCurrencyAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.IssuedCurrencyAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.IssuedCurrencyAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: (f = msg.getCurrency()) && proto.rpc.v1.Currency.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    issuer: (f = msg.getIssuer()) && proto.rpc.v1.AccountAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.IssuedCurrencyAmount}
 */
proto.rpc.v1.IssuedCurrencyAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.IssuedCurrencyAmount;
  return proto.rpc.v1.IssuedCurrencyAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.IssuedCurrencyAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.IssuedCurrencyAmount}
 */
proto.rpc.v1.IssuedCurrencyAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.v1.Currency;
      reader.readMessage(value,proto.rpc.v1.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.rpc.v1.AccountAddress;
      reader.readMessage(value,proto.rpc.v1.AccountAddress.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.IssuedCurrencyAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.IssuedCurrencyAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.IssuedCurrencyAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.v1.Currency.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.v1.AccountAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional Currency currency = 1;
 * @return {?proto.rpc.v1.Currency}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.getCurrency = function() {
  return /** @type{?proto.rpc.v1.Currency} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.Currency, 1));
};


/** @param {?proto.rpc.v1.Currency|undefined} value */
proto.rpc.v1.IssuedCurrencyAmount.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.IssuedCurrencyAmount.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rpc.v1.IssuedCurrencyAmount.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AccountAddress issuer = 3;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.getIssuer = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.AccountAddress, 3));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.IssuedCurrencyAmount.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.rpc.v1.IssuedCurrencyAmount.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.IssuedCurrencyAmount.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Currency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.Currency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Currency.displayName = 'proto.rpc.v1.Currency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Currency.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Currency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Currency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Currency.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: msg.getCode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Currency}
 */
proto.rpc.v1.Currency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Currency;
  return proto.rpc.v1.Currency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Currency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Currency}
 */
proto.rpc.v1.Currency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Currency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Currency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Currency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Currency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rpc.v1.Currency.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpc.v1.Currency.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes code = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Currency.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes code = 2;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.rpc.v1.Currency.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Currency.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Currency.prototype.setCode = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.rpc.v1);
