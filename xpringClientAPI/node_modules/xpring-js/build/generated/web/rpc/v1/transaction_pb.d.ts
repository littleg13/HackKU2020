import * as jspb from "google-protobuf"

import * as rpc_v1_amount_pb from '../../rpc/v1/amount_pb';

export class Transaction extends jspb.Message {
  getAccount(): rpc_v1_amount_pb.AccountAddress | undefined;
  setAccount(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasAccount(): boolean;
  clearAccount(): void;

  getFee(): rpc_v1_amount_pb.XRPDropsAmount | undefined;
  setFee(value?: rpc_v1_amount_pb.XRPDropsAmount): void;
  hasFee(): boolean;
  clearFee(): void;

  getSequence(): number;
  setSequence(value: number): void;

  getPayment(): Payment | undefined;
  setPayment(value?: Payment): void;
  hasPayment(): boolean;
  clearPayment(): void;

  getSigningPublicKey(): Uint8Array | string;
  getSigningPublicKey_asU8(): Uint8Array;
  getSigningPublicKey_asB64(): string;
  setSigningPublicKey(value: Uint8Array | string): void;

  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  getFlags(): number;
  setFlags(value: number): void;

  getLastLedgerSequence(): number;
  setLastLedgerSequence(value: number): void;

  getSourceTag(): number;
  setSourceTag(value: number): void;

  getMemosList(): Array<Memo>;
  setMemosList(value: Array<Memo>): void;
  clearMemosList(): void;
  addMemos(value?: Memo, index?: number): Memo;

  getSignersList(): Array<Signer>;
  setSignersList(value: Array<Signer>): void;
  clearSignersList(): void;
  addSigners(value?: Signer, index?: number): Signer;

  getAccountTransactionId(): Uint8Array | string;
  getAccountTransactionId_asU8(): Uint8Array;
  getAccountTransactionId_asB64(): string;
  setAccountTransactionId(value: Uint8Array | string): void;

  getTransactionDataCase(): Transaction.TransactionDataCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Transaction.AsObject;
  static toObject(includeInstance: boolean, msg: Transaction): Transaction.AsObject;
  static serializeBinaryToWriter(message: Transaction, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Transaction;
  static deserializeBinaryFromReader(message: Transaction, reader: jspb.BinaryReader): Transaction;
}

export namespace Transaction {
  export type AsObject = {
    account?: rpc_v1_amount_pb.AccountAddress.AsObject,
    fee?: rpc_v1_amount_pb.XRPDropsAmount.AsObject,
    sequence: number,
    payment?: Payment.AsObject,
    signingPublicKey: Uint8Array | string,
    signature: Uint8Array | string,
    flags: number,
    lastLedgerSequence: number,
    sourceTag: number,
    memosList: Array<Memo.AsObject>,
    signersList: Array<Signer.AsObject>,
    accountTransactionId: Uint8Array | string,
  }

  export enum TransactionDataCase { 
    TRANSACTION_DATA_NOT_SET = 0,
    PAYMENT = 4,
  }
}

export class Memo extends jspb.Message {
  getMemoData(): Uint8Array | string;
  getMemoData_asU8(): Uint8Array;
  getMemoData_asB64(): string;
  setMemoData(value: Uint8Array | string): void;

  getMemoFormat(): Uint8Array | string;
  getMemoFormat_asU8(): Uint8Array;
  getMemoFormat_asB64(): string;
  setMemoFormat(value: Uint8Array | string): void;

  getMemoType(): Uint8Array | string;
  getMemoType_asU8(): Uint8Array;
  getMemoType_asB64(): string;
  setMemoType(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Memo.AsObject;
  static toObject(includeInstance: boolean, msg: Memo): Memo.AsObject;
  static serializeBinaryToWriter(message: Memo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Memo;
  static deserializeBinaryFromReader(message: Memo, reader: jspb.BinaryReader): Memo;
}

export namespace Memo {
  export type AsObject = {
    memoData: Uint8Array | string,
    memoFormat: Uint8Array | string,
    memoType: Uint8Array | string,
  }
}

export class Signer extends jspb.Message {
  getAccount(): rpc_v1_amount_pb.AccountAddress | undefined;
  setAccount(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasAccount(): boolean;
  clearAccount(): void;

  getTransactionSignature(): Uint8Array | string;
  getTransactionSignature_asU8(): Uint8Array;
  getTransactionSignature_asB64(): string;
  setTransactionSignature(value: Uint8Array | string): void;

  getSigningPublicKey(): Uint8Array | string;
  getSigningPublicKey_asU8(): Uint8Array;
  getSigningPublicKey_asB64(): string;
  setSigningPublicKey(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Signer.AsObject;
  static toObject(includeInstance: boolean, msg: Signer): Signer.AsObject;
  static serializeBinaryToWriter(message: Signer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Signer;
  static deserializeBinaryFromReader(message: Signer, reader: jspb.BinaryReader): Signer;
}

export namespace Signer {
  export type AsObject = {
    account?: rpc_v1_amount_pb.AccountAddress.AsObject,
    transactionSignature: Uint8Array | string,
    signingPublicKey: Uint8Array | string,
  }
}

export class Payment extends jspb.Message {
  getAmount(): rpc_v1_amount_pb.CurrencyAmount | undefined;
  setAmount(value?: rpc_v1_amount_pb.CurrencyAmount): void;
  hasAmount(): boolean;
  clearAmount(): void;

  getDestination(): rpc_v1_amount_pb.AccountAddress | undefined;
  setDestination(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasDestination(): boolean;
  clearDestination(): void;

  getDestinationTag(): number;
  setDestinationTag(value: number): void;

  getInvoiceId(): Uint8Array | string;
  getInvoiceId_asU8(): Uint8Array;
  getInvoiceId_asB64(): string;
  setInvoiceId(value: Uint8Array | string): void;

  getPathsList(): Array<Path>;
  setPathsList(value: Array<Path>): void;
  clearPathsList(): void;
  addPaths(value?: Path, index?: number): Path;

  getSendMax(): rpc_v1_amount_pb.CurrencyAmount | undefined;
  setSendMax(value?: rpc_v1_amount_pb.CurrencyAmount): void;
  hasSendMax(): boolean;
  clearSendMax(): void;

  getDeliverMin(): rpc_v1_amount_pb.CurrencyAmount | undefined;
  setDeliverMin(value?: rpc_v1_amount_pb.CurrencyAmount): void;
  hasDeliverMin(): boolean;
  clearDeliverMin(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Payment.AsObject;
  static toObject(includeInstance: boolean, msg: Payment): Payment.AsObject;
  static serializeBinaryToWriter(message: Payment, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Payment;
  static deserializeBinaryFromReader(message: Payment, reader: jspb.BinaryReader): Payment;
}

export namespace Payment {
  export type AsObject = {
    amount?: rpc_v1_amount_pb.CurrencyAmount.AsObject,
    destination?: rpc_v1_amount_pb.AccountAddress.AsObject,
    destinationTag: number,
    invoiceId: Uint8Array | string,
    pathsList: Array<Path.AsObject>,
    sendMax?: rpc_v1_amount_pb.CurrencyAmount.AsObject,
    deliverMin?: rpc_v1_amount_pb.CurrencyAmount.AsObject,
  }
}

export class Path extends jspb.Message {
  getElementsList(): Array<PathElement>;
  setElementsList(value: Array<PathElement>): void;
  clearElementsList(): void;
  addElements(value?: PathElement, index?: number): PathElement;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Path.AsObject;
  static toObject(includeInstance: boolean, msg: Path): Path.AsObject;
  static serializeBinaryToWriter(message: Path, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Path;
  static deserializeBinaryFromReader(message: Path, reader: jspb.BinaryReader): Path;
}

export namespace Path {
  export type AsObject = {
    elementsList: Array<PathElement.AsObject>,
  }
}

export class PathElement extends jspb.Message {
  getAccount(): rpc_v1_amount_pb.AccountAddress | undefined;
  setAccount(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasAccount(): boolean;
  clearAccount(): void;

  getCurrency(): rpc_v1_amount_pb.Currency | undefined;
  setCurrency(value?: rpc_v1_amount_pb.Currency): void;
  hasCurrency(): boolean;
  clearCurrency(): void;

  getIssuer(): rpc_v1_amount_pb.AccountAddress | undefined;
  setIssuer(value?: rpc_v1_amount_pb.AccountAddress): void;
  hasIssuer(): boolean;
  clearIssuer(): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PathElement.AsObject;
  static toObject(includeInstance: boolean, msg: PathElement): PathElement.AsObject;
  static serializeBinaryToWriter(message: PathElement, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PathElement;
  static deserializeBinaryFromReader(message: PathElement, reader: jspb.BinaryReader): PathElement;
}

export namespace PathElement {
  export type AsObject = {
    account?: rpc_v1_amount_pb.AccountAddress.AsObject,
    currency?: rpc_v1_amount_pb.Currency.AsObject,
    issuer?: rpc_v1_amount_pb.AccountAddress.AsObject,
  }
}

