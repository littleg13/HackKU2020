// package: rpc.v1
// file: rpc/v1/tx.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as rpc_v1_transaction_pb from "../../rpc/v1/transaction_pb";
import * as rpc_v1_meta_pb from "../../rpc/v1/meta_pb";

export class GetTxRequest extends jspb.Message { 
    getHash(): Uint8Array | string;
    getHash_asU8(): Uint8Array;
    getHash_asB64(): string;
    setHash(value: Uint8Array | string): void;

    getBinary(): boolean;
    setBinary(value: boolean): void;


    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetTxRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetTxRequest): GetTxRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetTxRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetTxRequest;
    static deserializeBinaryFromReader(message: GetTxRequest, reader: jspb.BinaryReader): GetTxRequest;
}

export namespace GetTxRequest {
    export type AsObject = {
        hash: Uint8Array | string,
        binary: boolean,
    }
}

export class GetTxResponse extends jspb.Message { 

    hasTransaction(): boolean;
    clearTransaction(): void;
    getTransaction(): rpc_v1_transaction_pb.Transaction | undefined;
    setTransaction(value?: rpc_v1_transaction_pb.Transaction): void;


    hasTransactionBinary(): boolean;
    clearTransactionBinary(): void;
    getTransactionBinary(): Uint8Array | string;
    getTransactionBinary_asU8(): Uint8Array;
    getTransactionBinary_asB64(): string;
    setTransactionBinary(value: Uint8Array | string): void;

    getLedgerIndex(): number;
    setLedgerIndex(value: number): void;

    getHash(): Uint8Array | string;
    getHash_asU8(): Uint8Array;
    getHash_asB64(): string;
    setHash(value: Uint8Array | string): void;

    getValidated(): boolean;
    setValidated(value: boolean): void;


    hasMeta(): boolean;
    clearMeta(): void;
    getMeta(): rpc_v1_meta_pb.Meta | undefined;
    setMeta(value?: rpc_v1_meta_pb.Meta): void;


    hasMetaBinary(): boolean;
    clearMetaBinary(): void;
    getMetaBinary(): Uint8Array | string;
    getMetaBinary_asU8(): Uint8Array;
    getMetaBinary_asB64(): string;
    setMetaBinary(value: Uint8Array | string): void;


    getSerializedTransactionCase(): GetTxResponse.SerializedTransactionCase;
    getSerializedMetaCase(): GetTxResponse.SerializedMetaCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetTxResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetTxResponse): GetTxResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetTxResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetTxResponse;
    static deserializeBinaryFromReader(message: GetTxResponse, reader: jspb.BinaryReader): GetTxResponse;
}

export namespace GetTxResponse {
    export type AsObject = {
        transaction?: rpc_v1_transaction_pb.Transaction.AsObject,
        transactionBinary: Uint8Array | string,
        ledgerIndex: number,
        hash: Uint8Array | string,
        validated: boolean,
        meta?: rpc_v1_meta_pb.Meta.AsObject,
        metaBinary: Uint8Array | string,
    }

    export enum SerializedTransactionCase {
        SERIALIZED_TRANSACTION_NOT_SET = 0,
    
    TRANSACTION = 1,

    TRANSACTION_BINARY = 2,

    }

    export enum SerializedMetaCase {
        SERIALIZED_META_NOT_SET = 0,
    
    META = 6,

    META_BINARY = 7,

    }

}
