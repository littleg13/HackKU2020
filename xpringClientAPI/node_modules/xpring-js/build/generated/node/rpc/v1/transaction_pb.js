/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_v1_amount_pb = require('../../rpc/v1/amount_pb.js');
goog.object.extend(proto, rpc_v1_amount_pb);
goog.exportSymbol('proto.rpc.v1.Memo', null, global);
goog.exportSymbol('proto.rpc.v1.Path', null, global);
goog.exportSymbol('proto.rpc.v1.PathElement', null, global);
goog.exportSymbol('proto.rpc.v1.Payment', null, global);
goog.exportSymbol('proto.rpc.v1.Signer', null, global);
goog.exportSymbol('proto.rpc.v1.Transaction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.Transaction.repeatedFields_, proto.rpc.v1.Transaction.oneofGroups_);
};
goog.inherits(proto.rpc.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Transaction.displayName = 'proto.rpc.v1.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.Transaction.repeatedFields_ = [10,11];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.v1.Transaction.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.rpc.v1.Transaction.TransactionDataCase = {
  TRANSACTION_DATA_NOT_SET: 0,
  PAYMENT: 4
};

/**
 * @return {proto.rpc.v1.Transaction.TransactionDataCase}
 */
proto.rpc.v1.Transaction.prototype.getTransactionDataCase = function() {
  return /** @type {proto.rpc.v1.Transaction.TransactionDataCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    fee: (f = msg.getFee()) && rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payment: (f = msg.getPayment()) && proto.rpc.v1.Payment.toObject(includeInstance, f),
    signingPublicKey: msg.getSigningPublicKey_asB64(),
    signature: msg.getSignature_asB64(),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lastLedgerSequence: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sourceTag: jspb.Message.getFieldWithDefault(msg, 9, 0),
    memosList: jspb.Message.toObjectList(msg.getMemosList(),
    proto.rpc.v1.Memo.toObject, includeInstance),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.rpc.v1.Signer.toObject, includeInstance),
    accountTransactionId: msg.getAccountTransactionId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Transaction}
 */
proto.rpc.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Transaction;
  return proto.rpc.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Transaction}
 */
proto.rpc.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 4:
      var value = new proto.rpc.v1.Payment;
      reader.readMessage(value,proto.rpc.v1.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigningPublicKey(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastLedgerSequence(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceTag(value);
      break;
    case 10:
      var value = new proto.rpc.v1.Memo;
      reader.readMessage(value,proto.rpc.v1.Memo.deserializeBinaryFromReader);
      msg.addMemos(value);
      break;
    case 11:
      var value = new proto.rpc.v1.Signer;
      reader.readMessage(value,proto.rpc.v1.Signer.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.v1.Payment.serializeBinaryToWriter
    );
  }
  f = message.getSigningPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLastLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getSourceTag();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMemosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.rpc.v1.Memo.serializeBinaryToWriter
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.rpc.v1.Signer.serializeBinaryToWriter
    );
  }
  f = message.getAccountTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.Transaction.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.Transaction.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.Transaction.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Transaction.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XRPDropsAmount fee = 2;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.Transaction.prototype.getFee = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.XRPDropsAmount, 2));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.Transaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.Transaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Transaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.rpc.v1.Transaction.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.Transaction.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Payment payment = 4;
 * @return {?proto.rpc.v1.Payment}
 */
proto.rpc.v1.Transaction.prototype.getPayment = function() {
  return /** @type{?proto.rpc.v1.Payment} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.Payment, 4));
};


/** @param {?proto.rpc.v1.Payment|undefined} value */
proto.rpc.v1.Transaction.prototype.setPayment = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.rpc.v1.Transaction.oneofGroups_[0], value);
};


proto.rpc.v1.Transaction.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Transaction.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes signing_public_key = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Transaction.prototype.getSigningPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signing_public_key = 5;
 * This is a type-conversion wrapper around `getSigningPublicKey()`
 * @return {string}
 */
proto.rpc.v1.Transaction.prototype.getSigningPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigningPublicKey()));
};


/**
 * optional bytes signing_public_key = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigningPublicKey()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Transaction.prototype.getSigningPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigningPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Transaction.prototype.setSigningPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.rpc.v1.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 flags = 7;
 * @return {number}
 */
proto.rpc.v1.Transaction.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpc.v1.Transaction.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 last_ledger_sequence = 8;
 * @return {number}
 */
proto.rpc.v1.Transaction.prototype.getLastLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.rpc.v1.Transaction.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 source_tag = 9;
 * @return {number}
 */
proto.rpc.v1.Transaction.prototype.getSourceTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.rpc.v1.Transaction.prototype.setSourceTag = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated Memo memos = 10;
 * @return {!Array<!proto.rpc.v1.Memo>}
 */
proto.rpc.v1.Transaction.prototype.getMemosList = function() {
  return /** @type{!Array<!proto.rpc.v1.Memo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.Memo, 10));
};


/** @param {!Array<!proto.rpc.v1.Memo>} value */
proto.rpc.v1.Transaction.prototype.setMemosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.rpc.v1.Memo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.Memo}
 */
proto.rpc.v1.Transaction.prototype.addMemos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.rpc.v1.Memo, opt_index);
};


proto.rpc.v1.Transaction.prototype.clearMemosList = function() {
  this.setMemosList([]);
};


/**
 * repeated Signer signers = 11;
 * @return {!Array<!proto.rpc.v1.Signer>}
 */
proto.rpc.v1.Transaction.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.rpc.v1.Signer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.Signer, 11));
};


/** @param {!Array<!proto.rpc.v1.Signer>} value */
proto.rpc.v1.Transaction.prototype.setSignersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.rpc.v1.Signer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.Signer}
 */
proto.rpc.v1.Transaction.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.rpc.v1.Signer, opt_index);
};


proto.rpc.v1.Transaction.prototype.clearSignersList = function() {
  this.setSignersList([]);
};


/**
 * optional bytes account_transaction_id = 12;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Transaction.prototype.getAccountTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes account_transaction_id = 12;
 * This is a type-conversion wrapper around `getAccountTransactionId()`
 * @return {string}
 */
proto.rpc.v1.Transaction.prototype.getAccountTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountTransactionId()));
};


/**
 * optional bytes account_transaction_id = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountTransactionId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Transaction.prototype.getAccountTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountTransactionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Transaction.prototype.setAccountTransactionId = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Memo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.Memo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Memo.displayName = 'proto.rpc.v1.Memo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Memo.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Memo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Memo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Memo.toObject = function(includeInstance, msg) {
  var f, obj = {
    memoData: msg.getMemoData_asB64(),
    memoFormat: msg.getMemoFormat_asB64(),
    memoType: msg.getMemoType_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Memo}
 */
proto.rpc.v1.Memo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Memo;
  return proto.rpc.v1.Memo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Memo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Memo}
 */
proto.rpc.v1.Memo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemoData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemoFormat(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemoType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Memo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Memo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Memo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Memo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemoData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMemoFormat_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMemoType_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes memo_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Memo.prototype.getMemoData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes memo_data = 1;
 * This is a type-conversion wrapper around `getMemoData()`
 * @return {string}
 */
proto.rpc.v1.Memo.prototype.getMemoData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemoData()));
};


/**
 * optional bytes memo_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemoData()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Memo.prototype.getMemoData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemoData()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Memo.prototype.setMemoData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes memo_format = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Memo.prototype.getMemoFormat = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes memo_format = 2;
 * This is a type-conversion wrapper around `getMemoFormat()`
 * @return {string}
 */
proto.rpc.v1.Memo.prototype.getMemoFormat_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemoFormat()));
};


/**
 * optional bytes memo_format = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemoFormat()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Memo.prototype.getMemoFormat_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemoFormat()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Memo.prototype.setMemoFormat = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes memo_type = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Memo.prototype.getMemoType = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes memo_type = 3;
 * This is a type-conversion wrapper around `getMemoType()`
 * @return {string}
 */
proto.rpc.v1.Memo.prototype.getMemoType_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemoType()));
};


/**
 * optional bytes memo_type = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemoType()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Memo.prototype.getMemoType_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemoType()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Memo.prototype.setMemoType = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Signer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.Signer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Signer.displayName = 'proto.rpc.v1.Signer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Signer.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Signer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Signer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Signer.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    transactionSignature: msg.getTransactionSignature_asB64(),
    signingPublicKey: msg.getSigningPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Signer}
 */
proto.rpc.v1.Signer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Signer;
  return proto.rpc.v1.Signer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Signer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Signer}
 */
proto.rpc.v1.Signer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigningPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Signer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Signer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Signer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Signer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getTransactionSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigningPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.Signer.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.Signer.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.Signer.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Signer.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes transaction_signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Signer.prototype.getTransactionSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes transaction_signature = 2;
 * This is a type-conversion wrapper around `getTransactionSignature()`
 * @return {string}
 */
proto.rpc.v1.Signer.prototype.getTransactionSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionSignature()));
};


/**
 * optional bytes transaction_signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionSignature()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Signer.prototype.getTransactionSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Signer.prototype.setTransactionSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signing_public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Signer.prototype.getSigningPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signing_public_key = 3;
 * This is a type-conversion wrapper around `getSigningPublicKey()`
 * @return {string}
 */
proto.rpc.v1.Signer.prototype.getSigningPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigningPublicKey()));
};


/**
 * optional bytes signing_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigningPublicKey()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Signer.prototype.getSigningPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigningPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Signer.prototype.setSigningPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.Payment.repeatedFields_, null);
};
goog.inherits(proto.rpc.v1.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Payment.displayName = 'proto.rpc.v1.Payment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.Payment.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    destinationTag: jspb.Message.getFieldWithDefault(msg, 3, 0),
    invoiceId: msg.getInvoiceId_asB64(),
    pathsList: jspb.Message.toObjectList(msg.getPathsList(),
    proto.rpc.v1.Path.toObject, includeInstance),
    sendMax: (f = msg.getSendMax()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    deliverMin: (f = msg.getDeliverMin()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Payment}
 */
proto.rpc.v1.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Payment;
  return proto.rpc.v1.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Payment}
 */
proto.rpc.v1.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationTag(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInvoiceId(value);
      break;
    case 5:
      var value = new proto.rpc.v1.Path;
      reader.readMessage(value,proto.rpc.v1.Path.deserializeBinaryFromReader);
      msg.addPaths(value);
      break;
    case 6:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setSendMax(value);
      break;
    case 7:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setDeliverMin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getDestinationTag();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getInvoiceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rpc.v1.Path.serializeBinaryToWriter
    );
  }
  f = message.getSendMax();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getDeliverMin();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional CurrencyAmount amount = 1;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.Payment.prototype.getAmount = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 1));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.Payment.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.Payment.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Payment.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountAddress destination = 2;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.Payment.prototype.getDestination = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 2));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.Payment.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.Payment.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Payment.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 destination_tag = 3;
 * @return {number}
 */
proto.rpc.v1.Payment.prototype.getDestinationTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.Payment.prototype.setDestinationTag = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes invoice_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Payment.prototype.getInvoiceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes invoice_id = 4;
 * This is a type-conversion wrapper around `getInvoiceId()`
 * @return {string}
 */
proto.rpc.v1.Payment.prototype.getInvoiceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInvoiceId()));
};


/**
 * optional bytes invoice_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInvoiceId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Payment.prototype.getInvoiceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInvoiceId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Payment.prototype.setInvoiceId = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated Path paths = 5;
 * @return {!Array<!proto.rpc.v1.Path>}
 */
proto.rpc.v1.Payment.prototype.getPathsList = function() {
  return /** @type{!Array<!proto.rpc.v1.Path>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.Path, 5));
};


/** @param {!Array<!proto.rpc.v1.Path>} value */
proto.rpc.v1.Payment.prototype.setPathsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rpc.v1.Path=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.Path}
 */
proto.rpc.v1.Payment.prototype.addPaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpc.v1.Path, opt_index);
};


proto.rpc.v1.Payment.prototype.clearPathsList = function() {
  this.setPathsList([]);
};


/**
 * optional CurrencyAmount send_max = 6;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.Payment.prototype.getSendMax = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 6));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.Payment.prototype.setSendMax = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.rpc.v1.Payment.prototype.clearSendMax = function() {
  this.setSendMax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Payment.prototype.hasSendMax = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CurrencyAmount deliver_min = 7;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.Payment.prototype.getDeliverMin = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 7));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.Payment.prototype.setDeliverMin = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.rpc.v1.Payment.prototype.clearDeliverMin = function() {
  this.setDeliverMin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Payment.prototype.hasDeliverMin = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.Path.repeatedFields_, null);
};
goog.inherits(proto.rpc.v1.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Path.displayName = 'proto.rpc.v1.Path';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.Path.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Path} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.rpc.v1.PathElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Path}
 */
proto.rpc.v1.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Path;
  return proto.rpc.v1.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Path}
 */
proto.rpc.v1.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.v1.PathElement;
      reader.readMessage(value,proto.rpc.v1.PathElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Path.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rpc.v1.PathElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PathElement elements = 1;
 * @return {!Array<!proto.rpc.v1.PathElement>}
 */
proto.rpc.v1.Path.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.rpc.v1.PathElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.PathElement, 1));
};


/** @param {!Array<!proto.rpc.v1.PathElement>} value */
proto.rpc.v1.Path.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rpc.v1.PathElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.PathElement}
 */
proto.rpc.v1.Path.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rpc.v1.PathElement, opt_index);
};


proto.rpc.v1.Path.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.PathElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.PathElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.PathElement.displayName = 'proto.rpc.v1.PathElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.PathElement.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.PathElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.PathElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.PathElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    currency: (f = msg.getCurrency()) && rpc_v1_amount_pb.Currency.toObject(includeInstance, f),
    issuer: (f = msg.getIssuer()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.PathElement}
 */
proto.rpc.v1.PathElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.PathElement;
  return proto.rpc.v1.PathElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.PathElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.PathElement}
 */
proto.rpc.v1.PathElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new rpc_v1_amount_pb.Currency;
      reader.readMessage(value,rpc_v1_amount_pb.Currency.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 3:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.PathElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.PathElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.PathElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.PathElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_amount_pb.Currency.serializeBinaryToWriter
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.PathElement.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.PathElement.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.PathElement.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.PathElement.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Currency currency = 2;
 * @return {?proto.rpc.v1.Currency}
 */
proto.rpc.v1.PathElement.prototype.getCurrency = function() {
  return /** @type{?proto.rpc.v1.Currency} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.Currency, 2));
};


/** @param {?proto.rpc.v1.Currency|undefined} value */
proto.rpc.v1.PathElement.prototype.setCurrency = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.PathElement.prototype.clearCurrency = function() {
  this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.PathElement.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountAddress issuer = 3;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.PathElement.prototype.getIssuer = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 3));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.PathElement.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.rpc.v1.PathElement.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.PathElement.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.rpc.v1);
