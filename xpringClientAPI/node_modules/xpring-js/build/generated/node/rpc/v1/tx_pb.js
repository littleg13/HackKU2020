/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_v1_transaction_pb = require('../../rpc/v1/transaction_pb.js');
goog.object.extend(proto, rpc_v1_transaction_pb);
var rpc_v1_meta_pb = require('../../rpc/v1/meta_pb.js');
goog.object.extend(proto, rpc_v1_meta_pb);
goog.exportSymbol('proto.rpc.v1.GetTxRequest', null, global);
goog.exportSymbol('proto.rpc.v1.GetTxResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.GetTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.GetTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.GetTxRequest.displayName = 'proto.rpc.v1.GetTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.GetTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.GetTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.GetTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    binary: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.GetTxRequest}
 */
proto.rpc.v1.GetTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.GetTxRequest;
  return proto.rpc.v1.GetTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.GetTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.GetTxRequest}
 */
proto.rpc.v1.GetTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBinary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.GetTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.GetTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBinary();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.GetTxRequest.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.v1.GetTxRequest.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxRequest.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.GetTxRequest.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool binary = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetTxRequest.prototype.getBinary = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetTxRequest.prototype.setBinary = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.GetTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.v1.GetTxResponse.oneofGroups_);
};
goog.inherits(proto.rpc.v1.GetTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.GetTxResponse.displayName = 'proto.rpc.v1.GetTxResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.v1.GetTxResponse.oneofGroups_ = [[1,2],[6,7]];

/**
 * @enum {number}
 */
proto.rpc.v1.GetTxResponse.SerializedTransactionCase = {
  SERIALIZED_TRANSACTION_NOT_SET: 0,
  TRANSACTION: 1,
  TRANSACTION_BINARY: 2
};

/**
 * @return {proto.rpc.v1.GetTxResponse.SerializedTransactionCase}
 */
proto.rpc.v1.GetTxResponse.prototype.getSerializedTransactionCase = function() {
  return /** @type {proto.rpc.v1.GetTxResponse.SerializedTransactionCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.GetTxResponse.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.rpc.v1.GetTxResponse.SerializedMetaCase = {
  SERIALIZED_META_NOT_SET: 0,
  META: 6,
  META_BINARY: 7
};

/**
 * @return {proto.rpc.v1.GetTxResponse.SerializedMetaCase}
 */
proto.rpc.v1.GetTxResponse.prototype.getSerializedMetaCase = function() {
  return /** @type {proto.rpc.v1.GetTxResponse.SerializedMetaCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.GetTxResponse.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.GetTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.GetTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.GetTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && rpc_v1_transaction_pb.Transaction.toObject(includeInstance, f),
    transactionBinary: msg.getTransactionBinary_asB64(),
    ledgerIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: msg.getHash_asB64(),
    validated: jspb.Message.getFieldWithDefault(msg, 5, false),
    meta: (f = msg.getMeta()) && rpc_v1_meta_pb.Meta.toObject(includeInstance, f),
    metaBinary: msg.getMetaBinary_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.GetTxResponse}
 */
proto.rpc.v1.GetTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.GetTxResponse;
  return proto.rpc.v1.GetTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.GetTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.GetTxResponse}
 */
proto.rpc.v1.GetTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_transaction_pb.Transaction;
      reader.readMessage(value,rpc_v1_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionBinary(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    case 6:
      var value = new rpc_v1_meta_pb.Meta;
      reader.readMessage(value,rpc_v1_meta_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaBinary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.GetTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.GetTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLedgerIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      rpc_v1_meta_pb.Meta.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.rpc.v1.Transaction}
 */
proto.rpc.v1.GetTxResponse.prototype.getTransaction = function() {
  return /** @type{?proto.rpc.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, rpc_v1_transaction_pb.Transaction, 1));
};


/** @param {?proto.rpc.v1.Transaction|undefined} value */
proto.rpc.v1.GetTxResponse.prototype.setTransaction = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rpc.v1.GetTxResponse.oneofGroups_[0], value);
};


proto.rpc.v1.GetTxResponse.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetTxResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes transaction_binary = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.GetTxResponse.prototype.getTransactionBinary = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes transaction_binary = 2;
 * This is a type-conversion wrapper around `getTransactionBinary()`
 * @return {string}
 */
proto.rpc.v1.GetTxResponse.prototype.getTransactionBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionBinary()));
};


/**
 * optional bytes transaction_binary = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionBinary()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxResponse.prototype.getTransactionBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionBinary()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.GetTxResponse.prototype.setTransactionBinary = function(value) {
  jspb.Message.setOneofField(this, 2, proto.rpc.v1.GetTxResponse.oneofGroups_[0], value);
};


proto.rpc.v1.GetTxResponse.prototype.clearTransactionBinary = function() {
  jspb.Message.setOneofField(this, 2, proto.rpc.v1.GetTxResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetTxResponse.prototype.hasTransactionBinary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 ledger_index = 3;
 * @return {number}
 */
proto.rpc.v1.GetTxResponse.prototype.getLedgerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.GetTxResponse.prototype.setLedgerIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.GetTxResponse.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.v1.GetTxResponse.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxResponse.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.GetTxResponse.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool validated = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetTxResponse.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetTxResponse.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Meta meta = 6;
 * @return {?proto.rpc.v1.Meta}
 */
proto.rpc.v1.GetTxResponse.prototype.getMeta = function() {
  return /** @type{?proto.rpc.v1.Meta} */ (
    jspb.Message.getWrapperField(this, rpc_v1_meta_pb.Meta, 6));
};


/** @param {?proto.rpc.v1.Meta|undefined} value */
proto.rpc.v1.GetTxResponse.prototype.setMeta = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.rpc.v1.GetTxResponse.oneofGroups_[1], value);
};


proto.rpc.v1.GetTxResponse.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetTxResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes meta_binary = 7;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.GetTxResponse.prototype.getMetaBinary = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes meta_binary = 7;
 * This is a type-conversion wrapper around `getMetaBinary()`
 * @return {string}
 */
proto.rpc.v1.GetTxResponse.prototype.getMetaBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaBinary()));
};


/**
 * optional bytes meta_binary = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaBinary()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetTxResponse.prototype.getMetaBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaBinary()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.GetTxResponse.prototype.setMetaBinary = function(value) {
  jspb.Message.setOneofField(this, 7, proto.rpc.v1.GetTxResponse.oneofGroups_[1], value);
};


proto.rpc.v1.GetTxResponse.prototype.clearMetaBinary = function() {
  jspb.Message.setOneofField(this, 7, proto.rpc.v1.GetTxResponse.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetTxResponse.prototype.hasMetaBinary = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.rpc.v1);
