/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_v1_amount_pb = require('../../rpc/v1/amount_pb.js');
goog.object.extend(proto, rpc_v1_amount_pb);
goog.exportSymbol('proto.rpc.v1.AccountRoot', null, global);
goog.exportSymbol('proto.rpc.v1.DirectoryNode', null, global);
goog.exportSymbol('proto.rpc.v1.LedgerEntryType', null, global);
goog.exportSymbol('proto.rpc.v1.LedgerObject', null, global);
goog.exportSymbol('proto.rpc.v1.Offer', null, global);
goog.exportSymbol('proto.rpc.v1.RippleState', null, global);
goog.exportSymbol('proto.rpc.v1.SignerEntry', null, global);
goog.exportSymbol('proto.rpc.v1.SignerList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.LedgerObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.v1.LedgerObject.oneofGroups_);
};
goog.inherits(proto.rpc.v1.LedgerObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.LedgerObject.displayName = 'proto.rpc.v1.LedgerObject';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.v1.LedgerObject.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.rpc.v1.LedgerObject.ObjectCase = {
  OBJECT_NOT_SET: 0,
  ACCOUNT_ROOT: 1,
  RIPPLE_STATE: 2,
  OFFER: 3,
  SIGNER_LIST: 4,
  DIRECTORY_NODE: 5
};

/**
 * @return {proto.rpc.v1.LedgerObject.ObjectCase}
 */
proto.rpc.v1.LedgerObject.prototype.getObjectCase = function() {
  return /** @type {proto.rpc.v1.LedgerObject.ObjectCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.LedgerObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.LedgerObject.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.LedgerObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.LedgerObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.LedgerObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountRoot: (f = msg.getAccountRoot()) && proto.rpc.v1.AccountRoot.toObject(includeInstance, f),
    rippleState: (f = msg.getRippleState()) && proto.rpc.v1.RippleState.toObject(includeInstance, f),
    offer: (f = msg.getOffer()) && proto.rpc.v1.Offer.toObject(includeInstance, f),
    signerList: (f = msg.getSignerList()) && proto.rpc.v1.SignerList.toObject(includeInstance, f),
    directoryNode: (f = msg.getDirectoryNode()) && proto.rpc.v1.DirectoryNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.LedgerObject}
 */
proto.rpc.v1.LedgerObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.LedgerObject;
  return proto.rpc.v1.LedgerObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.LedgerObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.LedgerObject}
 */
proto.rpc.v1.LedgerObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rpc.v1.AccountRoot;
      reader.readMessage(value,proto.rpc.v1.AccountRoot.deserializeBinaryFromReader);
      msg.setAccountRoot(value);
      break;
    case 2:
      var value = new proto.rpc.v1.RippleState;
      reader.readMessage(value,proto.rpc.v1.RippleState.deserializeBinaryFromReader);
      msg.setRippleState(value);
      break;
    case 3:
      var value = new proto.rpc.v1.Offer;
      reader.readMessage(value,proto.rpc.v1.Offer.deserializeBinaryFromReader);
      msg.setOffer(value);
      break;
    case 4:
      var value = new proto.rpc.v1.SignerList;
      reader.readMessage(value,proto.rpc.v1.SignerList.deserializeBinaryFromReader);
      msg.setSignerList(value);
      break;
    case 5:
      var value = new proto.rpc.v1.DirectoryNode;
      reader.readMessage(value,proto.rpc.v1.DirectoryNode.deserializeBinaryFromReader);
      msg.setDirectoryNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.LedgerObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.LedgerObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.LedgerObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.LedgerObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rpc.v1.AccountRoot.serializeBinaryToWriter
    );
  }
  f = message.getRippleState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rpc.v1.RippleState.serializeBinaryToWriter
    );
  }
  f = message.getOffer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.v1.Offer.serializeBinaryToWriter
    );
  }
  f = message.getSignerList();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.v1.SignerList.serializeBinaryToWriter
    );
  }
  f = message.getDirectoryNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rpc.v1.DirectoryNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountRoot account_root = 1;
 * @return {?proto.rpc.v1.AccountRoot}
 */
proto.rpc.v1.LedgerObject.prototype.getAccountRoot = function() {
  return /** @type{?proto.rpc.v1.AccountRoot} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.AccountRoot, 1));
};


/** @param {?proto.rpc.v1.AccountRoot|undefined} value */
proto.rpc.v1.LedgerObject.prototype.setAccountRoot = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerObject.prototype.clearAccountRoot = function() {
  this.setAccountRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerObject.prototype.hasAccountRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RippleState ripple_state = 2;
 * @return {?proto.rpc.v1.RippleState}
 */
proto.rpc.v1.LedgerObject.prototype.getRippleState = function() {
  return /** @type{?proto.rpc.v1.RippleState} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.RippleState, 2));
};


/** @param {?proto.rpc.v1.RippleState|undefined} value */
proto.rpc.v1.LedgerObject.prototype.setRippleState = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerObject.prototype.clearRippleState = function() {
  this.setRippleState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerObject.prototype.hasRippleState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Offer offer = 3;
 * @return {?proto.rpc.v1.Offer}
 */
proto.rpc.v1.LedgerObject.prototype.getOffer = function() {
  return /** @type{?proto.rpc.v1.Offer} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.Offer, 3));
};


/** @param {?proto.rpc.v1.Offer|undefined} value */
proto.rpc.v1.LedgerObject.prototype.setOffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerObject.prototype.clearOffer = function() {
  this.setOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerObject.prototype.hasOffer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignerList signer_list = 4;
 * @return {?proto.rpc.v1.SignerList}
 */
proto.rpc.v1.LedgerObject.prototype.getSignerList = function() {
  return /** @type{?proto.rpc.v1.SignerList} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.SignerList, 4));
};


/** @param {?proto.rpc.v1.SignerList|undefined} value */
proto.rpc.v1.LedgerObject.prototype.setSignerList = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerObject.prototype.clearSignerList = function() {
  this.setSignerList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerObject.prototype.hasSignerList = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DirectoryNode directory_node = 5;
 * @return {?proto.rpc.v1.DirectoryNode}
 */
proto.rpc.v1.LedgerObject.prototype.getDirectoryNode = function() {
  return /** @type{?proto.rpc.v1.DirectoryNode} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.DirectoryNode, 5));
};


/** @param {?proto.rpc.v1.DirectoryNode|undefined} value */
proto.rpc.v1.LedgerObject.prototype.setDirectoryNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.rpc.v1.LedgerObject.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerObject.prototype.clearDirectoryNode = function() {
  this.setDirectoryNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerObject.prototype.hasDirectoryNode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.DirectoryNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.DirectoryNode.repeatedFields_, null);
};
goog.inherits(proto.rpc.v1.DirectoryNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.DirectoryNode.displayName = 'proto.rpc.v1.DirectoryNode';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.DirectoryNode.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.DirectoryNode.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.DirectoryNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.DirectoryNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.DirectoryNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rootIndex: msg.getRootIndex_asB64(),
    indexesList: msg.getIndexesList_asB64(),
    indexNext: jspb.Message.getFieldWithDefault(msg, 4, 0),
    indexPrevious: jspb.Message.getFieldWithDefault(msg, 5, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    takerPaysCurrency: (f = msg.getTakerPaysCurrency()) && rpc_v1_amount_pb.Currency.toObject(includeInstance, f),
    takerPaysIssuer: msg.getTakerPaysIssuer_asB64(),
    takerGetsCurrency: (f = msg.getTakerGetsCurrency()) && rpc_v1_amount_pb.Currency.toObject(includeInstance, f),
    takerGetsIssuer: msg.getTakerGetsIssuer_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.DirectoryNode}
 */
proto.rpc.v1.DirectoryNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.DirectoryNode;
  return proto.rpc.v1.DirectoryNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.DirectoryNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.DirectoryNode}
 */
proto.rpc.v1.DirectoryNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIndexes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndexNext(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndexPrevious(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 7:
      var value = new rpc_v1_amount_pb.Currency;
      reader.readMessage(value,rpc_v1_amount_pb.Currency.deserializeBinaryFromReader);
      msg.setTakerPaysCurrency(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTakerPaysIssuer(value);
      break;
    case 9:
      var value = new rpc_v1_amount_pb.Currency;
      reader.readMessage(value,rpc_v1_amount_pb.Currency.deserializeBinaryFromReader);
      msg.setTakerGetsCurrency(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTakerGetsIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.DirectoryNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.DirectoryNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.DirectoryNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.DirectoryNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRootIndex_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndexesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getIndexNext();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIndexPrevious();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTakerPaysCurrency();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      rpc_v1_amount_pb.Currency.serializeBinaryToWriter
    );
  }
  f = message.getTakerPaysIssuer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getTakerGetsCurrency();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      rpc_v1_amount_pb.Currency.serializeBinaryToWriter
    );
  }
  f = message.getTakerGetsIssuer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional uint32 flags = 1;
 * @return {number}
 */
proto.rpc.v1.DirectoryNode.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpc.v1.DirectoryNode.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes root_index = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.DirectoryNode.prototype.getRootIndex = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes root_index = 2;
 * This is a type-conversion wrapper around `getRootIndex()`
 * @return {string}
 */
proto.rpc.v1.DirectoryNode.prototype.getRootIndex_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootIndex()));
};


/**
 * optional bytes root_index = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootIndex()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.DirectoryNode.prototype.getRootIndex_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootIndex()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.DirectoryNode.prototype.setRootIndex = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes indexes = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.rpc.v1.DirectoryNode.prototype.getIndexesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes indexes = 3;
 * This is a type-conversion wrapper around `getIndexesList()`
 * @return {!Array<string>}
 */
proto.rpc.v1.DirectoryNode.prototype.getIndexesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIndexesList()));
};


/**
 * repeated bytes indexes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIndexesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rpc.v1.DirectoryNode.prototype.getIndexesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIndexesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.rpc.v1.DirectoryNode.prototype.setIndexesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.rpc.v1.DirectoryNode.prototype.addIndexes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.rpc.v1.DirectoryNode.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};


/**
 * optional uint64 index_next = 4;
 * @return {number}
 */
proto.rpc.v1.DirectoryNode.prototype.getIndexNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rpc.v1.DirectoryNode.prototype.setIndexNext = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 index_previous = 5;
 * @return {number}
 */
proto.rpc.v1.DirectoryNode.prototype.getIndexPrevious = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.v1.DirectoryNode.prototype.setIndexPrevious = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string owner = 6;
 * @return {string}
 */
proto.rpc.v1.DirectoryNode.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.rpc.v1.DirectoryNode.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Currency taker_pays_currency = 7;
 * @return {?proto.rpc.v1.Currency}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerPaysCurrency = function() {
  return /** @type{?proto.rpc.v1.Currency} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.Currency, 7));
};


/** @param {?proto.rpc.v1.Currency|undefined} value */
proto.rpc.v1.DirectoryNode.prototype.setTakerPaysCurrency = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.rpc.v1.DirectoryNode.prototype.clearTakerPaysCurrency = function() {
  this.setTakerPaysCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.DirectoryNode.prototype.hasTakerPaysCurrency = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes taker_pays_issuer = 8;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerPaysIssuer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes taker_pays_issuer = 8;
 * This is a type-conversion wrapper around `getTakerPaysIssuer()`
 * @return {string}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerPaysIssuer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTakerPaysIssuer()));
};


/**
 * optional bytes taker_pays_issuer = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTakerPaysIssuer()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerPaysIssuer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTakerPaysIssuer()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.DirectoryNode.prototype.setTakerPaysIssuer = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional Currency taker_gets_currency = 9;
 * @return {?proto.rpc.v1.Currency}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerGetsCurrency = function() {
  return /** @type{?proto.rpc.v1.Currency} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.Currency, 9));
};


/** @param {?proto.rpc.v1.Currency|undefined} value */
proto.rpc.v1.DirectoryNode.prototype.setTakerGetsCurrency = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.rpc.v1.DirectoryNode.prototype.clearTakerGetsCurrency = function() {
  this.setTakerGetsCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.DirectoryNode.prototype.hasTakerGetsCurrency = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes taker_gets_issuer = 10;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerGetsIssuer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes taker_gets_issuer = 10;
 * This is a type-conversion wrapper around `getTakerGetsIssuer()`
 * @return {string}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerGetsIssuer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTakerGetsIssuer()));
};


/**
 * optional bytes taker_gets_issuer = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTakerGetsIssuer()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.DirectoryNode.prototype.getTakerGetsIssuer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTakerGetsIssuer()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.DirectoryNode.prototype.setTakerGetsIssuer = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.SignerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.SignerList.repeatedFields_, null);
};
goog.inherits(proto.rpc.v1.SignerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.SignerList.displayName = 'proto.rpc.v1.SignerList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.SignerList.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.SignerList.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.SignerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.SignerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.SignerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getFieldWithDefault(msg, 1, 0),
    previousTxnId: msg.getPreviousTxnId_asB64(),
    previousTransactionLedgerSequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ownerNode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signerEntriesList: jspb.Message.toObjectList(msg.getSignerEntriesList(),
    proto.rpc.v1.SignerEntry.toObject, includeInstance),
    signerListId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    signerQuorum: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.SignerList}
 */
proto.rpc.v1.SignerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.SignerList;
  return proto.rpc.v1.SignerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.SignerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.SignerList}
 */
proto.rpc.v1.SignerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousTxnId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerNode(value);
      break;
    case 5:
      var value = new proto.rpc.v1.SignerEntry;
      reader.readMessage(value,proto.rpc.v1.SignerEntry.deserializeBinaryFromReader);
      msg.addSignerEntries(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignerListId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignerQuorum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.SignerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.SignerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.SignerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.SignerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPreviousTxnId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOwnerNode();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSignerEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rpc.v1.SignerEntry.serializeBinaryToWriter
    );
  }
  f = message.getSignerListId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSignerQuorum();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 flags = 1;
 * @return {number}
 */
proto.rpc.v1.SignerList.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerList.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes previous_txn_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.SignerList.prototype.getPreviousTxnId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes previous_txn_id = 2;
 * This is a type-conversion wrapper around `getPreviousTxnId()`
 * @return {string}
 */
proto.rpc.v1.SignerList.prototype.getPreviousTxnId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousTxnId()));
};


/**
 * optional bytes previous_txn_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousTxnId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.SignerList.prototype.getPreviousTxnId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousTxnId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.SignerList.prototype.setPreviousTxnId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 previous_transaction_ledger_sequence = 3;
 * @return {number}
 */
proto.rpc.v1.SignerList.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerList.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 owner_node = 4;
 * @return {number}
 */
proto.rpc.v1.SignerList.prototype.getOwnerNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerList.prototype.setOwnerNode = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated SignerEntry signer_entries = 5;
 * @return {!Array<!proto.rpc.v1.SignerEntry>}
 */
proto.rpc.v1.SignerList.prototype.getSignerEntriesList = function() {
  return /** @type{!Array<!proto.rpc.v1.SignerEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.SignerEntry, 5));
};


/** @param {!Array<!proto.rpc.v1.SignerEntry>} value */
proto.rpc.v1.SignerList.prototype.setSignerEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rpc.v1.SignerEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.SignerEntry}
 */
proto.rpc.v1.SignerList.prototype.addSignerEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpc.v1.SignerEntry, opt_index);
};


proto.rpc.v1.SignerList.prototype.clearSignerEntriesList = function() {
  this.setSignerEntriesList([]);
};


/**
 * optional uint32 signer_list_id = 6;
 * @return {number}
 */
proto.rpc.v1.SignerList.prototype.getSignerListId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerList.prototype.setSignerListId = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 signer_quorum = 7;
 * @return {number}
 */
proto.rpc.v1.SignerList.prototype.getSignerQuorum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerList.prototype.setSignerQuorum = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.SignerEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.SignerEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.SignerEntry.displayName = 'proto.rpc.v1.SignerEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.SignerEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.SignerEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.SignerEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.SignerEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    signerWeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.SignerEntry}
 */
proto.rpc.v1.SignerEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.SignerEntry;
  return proto.rpc.v1.SignerEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.SignerEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.SignerEntry}
 */
proto.rpc.v1.SignerEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignerWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.SignerEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.SignerEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.SignerEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.SignerEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getSignerWeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.SignerEntry.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.SignerEntry.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.SignerEntry.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.SignerEntry.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 signer_weight = 2;
 * @return {number}
 */
proto.rpc.v1.SignerEntry.prototype.getSignerWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpc.v1.SignerEntry.prototype.setSignerWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.AccountRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.AccountRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.AccountRoot.displayName = 'proto.rpc.v1.AccountRoot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.AccountRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.AccountRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.AccountRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.AccountRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    balance: (f = msg.getBalance()) && rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ownerCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    previousTransactionId: msg.getPreviousTransactionId_asB64(),
    previousTransactionLedgerSequence: jspb.Message.getFieldWithDefault(msg, 7, 0),
    accountTransactionId: msg.getAccountTransactionId_asB64(),
    domain: msg.getDomain_asB64(),
    emailHash: msg.getEmailHash_asB64(),
    messageKey: msg.getMessageKey_asB64(),
    regularKey: jspb.Message.getFieldWithDefault(msg, 12, ""),
    tickSize: jspb.Message.getFieldWithDefault(msg, 13, 0),
    transferRate: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.AccountRoot}
 */
proto.rpc.v1.AccountRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.AccountRoot;
  return proto.rpc.v1.AccountRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.AccountRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.AccountRoot}
 */
proto.rpc.v1.AccountRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOwnerCount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousTransactionId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountTransactionId(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDomain(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEmailHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageKey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegularKey(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTickSize(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransferRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.AccountRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.AccountRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.AccountRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOwnerCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPreviousTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAccountTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getDomain_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getEmailHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getMessageKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getRegularKey();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTickSize();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getTransferRate();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.AccountRoot.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.AccountRoot.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.AccountRoot.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.AccountRoot.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XRPDropsAmount balance = 2;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.AccountRoot.prototype.getBalance = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.XRPDropsAmount, 2));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.AccountRoot.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.AccountRoot.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.AccountRoot.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sequence = 3;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 flags = 4;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 owner_count = 5;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getOwnerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setOwnerCount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes previous_transaction_id = 6;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.AccountRoot.prototype.getPreviousTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes previous_transaction_id = 6;
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getPreviousTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousTransactionId()));
};


/**
 * optional bytes previous_transaction_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.getPreviousTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousTransactionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.AccountRoot.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 previous_transaction_ledger_sequence = 7;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes account_transaction_id = 8;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.AccountRoot.prototype.getAccountTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes account_transaction_id = 8;
 * This is a type-conversion wrapper around `getAccountTransactionId()`
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getAccountTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountTransactionId()));
};


/**
 * optional bytes account_transaction_id = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountTransactionId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.getAccountTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountTransactionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.AccountRoot.prototype.setAccountTransactionId = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes domain = 9;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.AccountRoot.prototype.getDomain = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes domain = 9;
 * This is a type-conversion wrapper around `getDomain()`
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getDomain_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDomain()));
};


/**
 * optional bytes domain = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDomain()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.getDomain_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDomain()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.AccountRoot.prototype.setDomain = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes email_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.AccountRoot.prototype.getEmailHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes email_hash = 10;
 * This is a type-conversion wrapper around `getEmailHash()`
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getEmailHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEmailHash()));
};


/**
 * optional bytes email_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEmailHash()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.getEmailHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEmailHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.AccountRoot.prototype.setEmailHash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes message_key = 11;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.AccountRoot.prototype.getMessageKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes message_key = 11;
 * This is a type-conversion wrapper around `getMessageKey()`
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getMessageKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageKey()));
};


/**
 * optional bytes message_key = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageKey()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.AccountRoot.prototype.getMessageKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.AccountRoot.prototype.setMessageKey = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional string regular_key = 12;
 * @return {string}
 */
proto.rpc.v1.AccountRoot.prototype.getRegularKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.rpc.v1.AccountRoot.prototype.setRegularKey = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 tick_size = 13;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getTickSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setTickSize = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 transfer_rate = 14;
 * @return {number}
 */
proto.rpc.v1.AccountRoot.prototype.getTransferRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.rpc.v1.AccountRoot.prototype.setTransferRate = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.RippleState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.RippleState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.RippleState.displayName = 'proto.rpc.v1.RippleState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.RippleState.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.RippleState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.RippleState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.RippleState.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: (f = msg.getBalance()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    flags: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lowLimit: (f = msg.getLowLimit()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    highLimit: (f = msg.getHighLimit()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    lowNode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    highNode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lowQualityIn: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lowQualityOut: jspb.Message.getFieldWithDefault(msg, 8, 0),
    highQualityIn: jspb.Message.getFieldWithDefault(msg, 9, 0),
    highQualityOut: jspb.Message.getFieldWithDefault(msg, 10, 0),
    previousTransactionId: msg.getPreviousTransactionId_asB64(),
    previousTransactionLedgerSequence: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.RippleState}
 */
proto.rpc.v1.RippleState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.RippleState;
  return proto.rpc.v1.RippleState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.RippleState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.RippleState}
 */
proto.rpc.v1.RippleState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 3:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setLowLimit(value);
      break;
    case 4:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setHighLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLowNode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHighNode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLowQualityIn(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLowQualityOut(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighQualityIn(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighQualityOut(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousTransactionId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.RippleState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.RippleState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.RippleState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.RippleState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLowLimit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getHighLimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getLowNode();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getHighNode();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLowQualityIn();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLowQualityOut();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getHighQualityIn();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getHighQualityOut();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getPreviousTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional CurrencyAmount balance = 1;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.RippleState.prototype.getBalance = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 1));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.RippleState.prototype.setBalance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.RippleState.prototype.clearBalance = function() {
  this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.RippleState.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 flags = 2;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CurrencyAmount low_limit = 3;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.RippleState.prototype.getLowLimit = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 3));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.RippleState.prototype.setLowLimit = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.rpc.v1.RippleState.prototype.clearLowLimit = function() {
  this.setLowLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.RippleState.prototype.hasLowLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CurrencyAmount high_limit = 4;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.RippleState.prototype.getHighLimit = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 4));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.RippleState.prototype.setHighLimit = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.rpc.v1.RippleState.prototype.clearHighLimit = function() {
  this.setHighLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.RippleState.prototype.hasHighLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 low_node = 5;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getLowNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setLowNode = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 high_node = 6;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getHighNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setHighNode = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 low_quality_in = 7;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getLowQualityIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setLowQualityIn = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 low_quality_out = 8;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getLowQualityOut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setLowQualityOut = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 high_quality_in = 9;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getHighQualityIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setHighQualityIn = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 high_quality_out = 10;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getHighQualityOut = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setHighQualityOut = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes previous_transaction_id = 11;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.RippleState.prototype.getPreviousTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes previous_transaction_id = 11;
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {string}
 */
proto.rpc.v1.RippleState.prototype.getPreviousTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousTransactionId()));
};


/**
 * optional bytes previous_transaction_id = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.RippleState.prototype.getPreviousTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousTransactionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.RippleState.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional uint32 previous_transaction_ledger_sequence = 12;
 * @return {number}
 */
proto.rpc.v1.RippleState.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.rpc.v1.RippleState.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.Offer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.Offer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.Offer.displayName = 'proto.rpc.v1.Offer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.Offer.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.Offer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.Offer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Offer.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 3, 0),
    takerPays: (f = msg.getTakerPays()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    takerGets: (f = msg.getTakerGets()) && rpc_v1_amount_pb.CurrencyAmount.toObject(includeInstance, f),
    bookDirectory: msg.getBookDirectory_asB64(),
    bookNode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ownerNode: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    previousTransactionId: msg.getPreviousTransactionId_asB64(),
    previousTransactionLedgerSequence: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.Offer}
 */
proto.rpc.v1.Offer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.Offer;
  return proto.rpc.v1.Offer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.Offer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.Offer}
 */
proto.rpc.v1.Offer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 4:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setTakerPays(value);
      break;
    case 5:
      var value = new rpc_v1_amount_pb.CurrencyAmount;
      reader.readMessage(value,rpc_v1_amount_pb.CurrencyAmount.deserializeBinaryFromReader);
      msg.setTakerGets(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBookDirectory(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBookNode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerNode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpiration(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousTransactionId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreviousTransactionLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.Offer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.Offer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.Offer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.Offer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTakerPays();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getTakerGets();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      rpc_v1_amount_pb.CurrencyAmount.serializeBinaryToWriter
    );
  }
  f = message.getBookDirectory_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBookNode();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getOwnerNode();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPreviousTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getPreviousTransactionLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.rpc.v1.Offer.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rpc.v1.Offer.prototype.setAccount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 sequence = 2;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 flags = 3;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CurrencyAmount taker_pays = 4;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.Offer.prototype.getTakerPays = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 4));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.Offer.prototype.setTakerPays = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.rpc.v1.Offer.prototype.clearTakerPays = function() {
  this.setTakerPays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Offer.prototype.hasTakerPays = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CurrencyAmount taker_gets = 5;
 * @return {?proto.rpc.v1.CurrencyAmount}
 */
proto.rpc.v1.Offer.prototype.getTakerGets = function() {
  return /** @type{?proto.rpc.v1.CurrencyAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.CurrencyAmount, 5));
};


/** @param {?proto.rpc.v1.CurrencyAmount|undefined} value */
proto.rpc.v1.Offer.prototype.setTakerGets = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.rpc.v1.Offer.prototype.clearTakerGets = function() {
  this.setTakerGets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.Offer.prototype.hasTakerGets = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes book_directory = 6;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Offer.prototype.getBookDirectory = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes book_directory = 6;
 * This is a type-conversion wrapper around `getBookDirectory()`
 * @return {string}
 */
proto.rpc.v1.Offer.prototype.getBookDirectory_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBookDirectory()));
};


/**
 * optional bytes book_directory = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBookDirectory()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Offer.prototype.getBookDirectory_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBookDirectory()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Offer.prototype.setBookDirectory = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 book_node = 7;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getBookNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setBookNode = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 owner_node = 8;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getOwnerNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setOwnerNode = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 expiration = 9;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setExpiration = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes previous_transaction_id = 10;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.Offer.prototype.getPreviousTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes previous_transaction_id = 10;
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {string}
 */
proto.rpc.v1.Offer.prototype.getPreviousTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousTransactionId()));
};


/**
 * optional bytes previous_transaction_id = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousTransactionId()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.Offer.prototype.getPreviousTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousTransactionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.Offer.prototype.setPreviousTransactionId = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint32 previous_transaction_ledger_sequence = 11;
 * @return {number}
 */
proto.rpc.v1.Offer.prototype.getPreviousTransactionLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.rpc.v1.Offer.prototype.setPreviousTransactionLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * @enum {number}
 */
proto.rpc.v1.LedgerEntryType = {
  LEDGER_ENTRY_TYPE_UNSPECIFIED: 0,
  LEDGER_ENTRY_TYPE_ACCOUNT_ROOT: 1,
  LEDGER_ENTRY_TYPE_AMENDMENTS: 2,
  LEDGER_ENTRY_TYPE_CHECK: 3,
  LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH: 4,
  LEDGER_ENTRY_TYPE_DIRECTORY_NODE: 5,
  LEDGER_ENTRY_TYPE_ESCROW: 6,
  LEDGER_ENTRY_TYPE_FEE_SETTINGS: 7,
  LEDGER_ENTRY_TYPE_LEDGER_HASHES: 8,
  LEDGER_ENTRY_TYPE_OFFER: 9,
  LEDGER_ENTRY_TYPE_PAY_CHANNEL: 10,
  LEDGER_ENTRY_TYPE_RIPPLE_STATE: 11,
  LEDGER_ENTRY_TYPE_SIGNER_LIST: 12
};

goog.object.extend(exports, proto.rpc.v1);
