/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rpc_v1_ledger_objects_pb = require('../../rpc/v1/ledger_objects_pb.js');
goog.object.extend(proto, rpc_v1_ledger_objects_pb);
var rpc_v1_amount_pb = require('../../rpc/v1/amount_pb.js');
goog.object.extend(proto, rpc_v1_amount_pb);
goog.exportSymbol('proto.rpc.v1.GetAccountInfoRequest', null, global);
goog.exportSymbol('proto.rpc.v1.GetAccountInfoResponse', null, global);
goog.exportSymbol('proto.rpc.v1.LedgerSpecifier', null, global);
goog.exportSymbol('proto.rpc.v1.LedgerSpecifier.Shortcut', null, global);
goog.exportSymbol('proto.rpc.v1.QueueData', null, global);
goog.exportSymbol('proto.rpc.v1.QueuedTransaction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.GetAccountInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.GetAccountInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.GetAccountInfoRequest.displayName = 'proto.rpc.v1.GetAccountInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.GetAccountInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.GetAccountInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetAccountInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && rpc_v1_amount_pb.AccountAddress.toObject(includeInstance, f),
    strict: jspb.Message.getFieldWithDefault(msg, 2, false),
    ledger: (f = msg.getLedger()) && proto.rpc.v1.LedgerSpecifier.toObject(includeInstance, f),
    queue: jspb.Message.getFieldWithDefault(msg, 4, false),
    signerLists: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.GetAccountInfoRequest}
 */
proto.rpc.v1.GetAccountInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.GetAccountInfoRequest;
  return proto.rpc.v1.GetAccountInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.GetAccountInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.GetAccountInfoRequest}
 */
proto.rpc.v1.GetAccountInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_amount_pb.AccountAddress;
      reader.readMessage(value,rpc_v1_amount_pb.AccountAddress.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrict(value);
      break;
    case 3:
      var value = new proto.rpc.v1.LedgerSpecifier;
      reader.readMessage(value,proto.rpc.v1.LedgerSpecifier.deserializeBinaryFromReader);
      msg.setLedger(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignerLists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.GetAccountInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.GetAccountInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetAccountInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_amount_pb.AccountAddress.serializeBinaryToWriter
    );
  }
  f = message.getStrict();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLedger();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rpc.v1.LedgerSpecifier.serializeBinaryToWriter
    );
  }
  f = message.getQueue();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSignerLists();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional AccountAddress account = 1;
 * @return {?proto.rpc.v1.AccountAddress}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.getAccount = function() {
  return /** @type{?proto.rpc.v1.AccountAddress} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.AccountAddress, 1));
};


/** @param {?proto.rpc.v1.AccountAddress|undefined} value */
proto.rpc.v1.GetAccountInfoRequest.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.GetAccountInfoRequest.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool strict = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.getStrict = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetAccountInfoRequest.prototype.setStrict = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional LedgerSpecifier ledger = 3;
 * @return {?proto.rpc.v1.LedgerSpecifier}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.getLedger = function() {
  return /** @type{?proto.rpc.v1.LedgerSpecifier} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.LedgerSpecifier, 3));
};


/** @param {?proto.rpc.v1.LedgerSpecifier|undefined} value */
proto.rpc.v1.GetAccountInfoRequest.prototype.setLedger = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.rpc.v1.GetAccountInfoRequest.prototype.clearLedger = function() {
  this.setLedger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.hasLedger = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool queue = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.getQueue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetAccountInfoRequest.prototype.setQueue = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool signer_lists = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoRequest.prototype.getSignerLists = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetAccountInfoRequest.prototype.setSignerLists = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.LedgerSpecifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rpc.v1.LedgerSpecifier.oneofGroups_);
};
goog.inherits(proto.rpc.v1.LedgerSpecifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.LedgerSpecifier.displayName = 'proto.rpc.v1.LedgerSpecifier';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rpc.v1.LedgerSpecifier.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rpc.v1.LedgerSpecifier.LedgerCase = {
  LEDGER_NOT_SET: 0,
  SHORTCUT: 1,
  SEQUENCE: 2,
  HASH: 3
};

/**
 * @return {proto.rpc.v1.LedgerSpecifier.LedgerCase}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getLedgerCase = function() {
  return /** @type {proto.rpc.v1.LedgerSpecifier.LedgerCase} */(jspb.Message.computeOneofCase(this, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.LedgerSpecifier.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.LedgerSpecifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.LedgerSpecifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.LedgerSpecifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortcut: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.LedgerSpecifier}
 */
proto.rpc.v1.LedgerSpecifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.LedgerSpecifier;
  return proto.rpc.v1.LedgerSpecifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.LedgerSpecifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.LedgerSpecifier}
 */
proto.rpc.v1.LedgerSpecifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rpc.v1.LedgerSpecifier.Shortcut} */ (reader.readEnum());
      msg.setShortcut(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.LedgerSpecifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.LedgerSpecifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.LedgerSpecifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.LedgerSpecifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.rpc.v1.LedgerSpecifier.Shortcut} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rpc.v1.LedgerSpecifier.Shortcut = {
  SHORTCUT_UNSPECIFIED: 0,
  SHORTCUT_VALIDATED: 1,
  SHORTCUT_CLOSED: 2,
  SHORTCUT_CURRENT: 3
};

/**
 * optional Shortcut shortcut = 1;
 * @return {!proto.rpc.v1.LedgerSpecifier.Shortcut}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getShortcut = function() {
  return /** @type {!proto.rpc.v1.LedgerSpecifier.Shortcut} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.rpc.v1.LedgerSpecifier.Shortcut} value */
proto.rpc.v1.LedgerSpecifier.prototype.setShortcut = function(value) {
  jspb.Message.setOneofField(this, 1, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerSpecifier.prototype.clearShortcut = function() {
  jspb.Message.setOneofField(this, 1, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerSpecifier.prototype.hasShortcut = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 sequence = 2;
 * @return {number}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.rpc.v1.LedgerSpecifier.prototype.setSequence = function(value) {
  jspb.Message.setOneofField(this, 2, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerSpecifier.prototype.clearSequence = function() {
  jspb.Message.setOneofField(this, 2, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerSpecifier.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.rpc.v1.LedgerSpecifier.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.rpc.v1.LedgerSpecifier.prototype.setHash = function(value) {
  jspb.Message.setOneofField(this, 3, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], value);
};


proto.rpc.v1.LedgerSpecifier.prototype.clearHash = function() {
  jspb.Message.setOneofField(this, 3, proto.rpc.v1.LedgerSpecifier.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.LedgerSpecifier.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.GetAccountInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.GetAccountInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.GetAccountInfoResponse.displayName = 'proto.rpc.v1.GetAccountInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.GetAccountInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.GetAccountInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetAccountInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountData: (f = msg.getAccountData()) && rpc_v1_ledger_objects_pb.AccountRoot.toObject(includeInstance, f),
    signerList: (f = msg.getSignerList()) && rpc_v1_ledger_objects_pb.SignerList.toObject(includeInstance, f),
    ledgerIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    queueData: (f = msg.getQueueData()) && proto.rpc.v1.QueueData.toObject(includeInstance, f),
    validated: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.GetAccountInfoResponse}
 */
proto.rpc.v1.GetAccountInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.GetAccountInfoResponse;
  return proto.rpc.v1.GetAccountInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.GetAccountInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.GetAccountInfoResponse}
 */
proto.rpc.v1.GetAccountInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new rpc_v1_ledger_objects_pb.AccountRoot;
      reader.readMessage(value,rpc_v1_ledger_objects_pb.AccountRoot.deserializeBinaryFromReader);
      msg.setAccountData(value);
      break;
    case 2:
      var value = new rpc_v1_ledger_objects_pb.SignerList;
      reader.readMessage(value,rpc_v1_ledger_objects_pb.SignerList.deserializeBinaryFromReader);
      msg.setSignerList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedgerIndex(value);
      break;
    case 4:
      var value = new proto.rpc.v1.QueueData;
      reader.readMessage(value,proto.rpc.v1.QueueData.deserializeBinaryFromReader);
      msg.setQueueData(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.GetAccountInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.GetAccountInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.GetAccountInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      rpc_v1_ledger_objects_pb.AccountRoot.serializeBinaryToWriter
    );
  }
  f = message.getSignerList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_ledger_objects_pb.SignerList.serializeBinaryToWriter
    );
  }
  f = message.getLedgerIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getQueueData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rpc.v1.QueueData.serializeBinaryToWriter
    );
  }
  f = message.getValidated();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional AccountRoot account_data = 1;
 * @return {?proto.rpc.v1.AccountRoot}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.getAccountData = function() {
  return /** @type{?proto.rpc.v1.AccountRoot} */ (
    jspb.Message.getWrapperField(this, rpc_v1_ledger_objects_pb.AccountRoot, 1));
};


/** @param {?proto.rpc.v1.AccountRoot|undefined} value */
proto.rpc.v1.GetAccountInfoResponse.prototype.setAccountData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rpc.v1.GetAccountInfoResponse.prototype.clearAccountData = function() {
  this.setAccountData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.hasAccountData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignerList signer_list = 2;
 * @return {?proto.rpc.v1.SignerList}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.getSignerList = function() {
  return /** @type{?proto.rpc.v1.SignerList} */ (
    jspb.Message.getWrapperField(this, rpc_v1_ledger_objects_pb.SignerList, 2));
};


/** @param {?proto.rpc.v1.SignerList|undefined} value */
proto.rpc.v1.GetAccountInfoResponse.prototype.setSignerList = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.GetAccountInfoResponse.prototype.clearSignerList = function() {
  this.setSignerList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.hasSignerList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 ledger_index = 3;
 * @return {number}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.getLedgerIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.GetAccountInfoResponse.prototype.setLedgerIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional QueueData queue_data = 4;
 * @return {?proto.rpc.v1.QueueData}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.getQueueData = function() {
  return /** @type{?proto.rpc.v1.QueueData} */ (
    jspb.Message.getWrapperField(this, proto.rpc.v1.QueueData, 4));
};


/** @param {?proto.rpc.v1.QueueData|undefined} value */
proto.rpc.v1.GetAccountInfoResponse.prototype.setQueueData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.rpc.v1.GetAccountInfoResponse.prototype.clearQueueData = function() {
  this.setQueueData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.hasQueueData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool validated = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.GetAccountInfoResponse.prototype.getValidated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.rpc.v1.GetAccountInfoResponse.prototype.setValidated = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.QueueData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.v1.QueueData.repeatedFields_, null);
};
goog.inherits(proto.rpc.v1.QueueData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.QueueData.displayName = 'proto.rpc.v1.QueueData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.v1.QueueData.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.QueueData.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.QueueData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.QueueData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.QueueData.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authChangeQueued: jspb.Message.getFieldWithDefault(msg, 2, false),
    lowestSequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    highestSequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxSpendDropsTotal: (f = msg.getMaxSpendDropsTotal()) && rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.rpc.v1.QueuedTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.QueueData}
 */
proto.rpc.v1.QueueData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.QueueData;
  return proto.rpc.v1.QueueData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.QueueData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.QueueData}
 */
proto.rpc.v1.QueueData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxnCount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthChangeQueued(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLowestSequence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighestSequence(value);
      break;
    case 5:
      var value = new rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setMaxSpendDropsTotal(value);
      break;
    case 6:
      var value = new proto.rpc.v1.QueuedTransaction;
      reader.readMessage(value,proto.rpc.v1.QueuedTransaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.QueueData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.QueueData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.QueueData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.QueueData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthChangeQueued();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLowestSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHighestSequence();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxSpendDropsTotal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rpc.v1.QueuedTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 txn_count = 1;
 * @return {number}
 */
proto.rpc.v1.QueueData.prototype.getTxnCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rpc.v1.QueueData.prototype.setTxnCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool auth_change_queued = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.QueueData.prototype.getAuthChangeQueued = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.rpc.v1.QueueData.prototype.setAuthChangeQueued = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 lowest_sequence = 3;
 * @return {number}
 */
proto.rpc.v1.QueueData.prototype.getLowestSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.QueueData.prototype.setLowestSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 highest_sequence = 4;
 * @return {number}
 */
proto.rpc.v1.QueueData.prototype.getHighestSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rpc.v1.QueueData.prototype.setHighestSequence = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional XRPDropsAmount max_spend_drops_total = 5;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.QueueData.prototype.getMaxSpendDropsTotal = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.XRPDropsAmount, 5));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.QueueData.prototype.setMaxSpendDropsTotal = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.rpc.v1.QueueData.prototype.clearMaxSpendDropsTotal = function() {
  this.setMaxSpendDropsTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.QueueData.prototype.hasMaxSpendDropsTotal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated QueuedTransaction transactions = 6;
 * @return {!Array<!proto.rpc.v1.QueuedTransaction>}
 */
proto.rpc.v1.QueueData.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.rpc.v1.QueuedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rpc.v1.QueuedTransaction, 6));
};


/** @param {!Array<!proto.rpc.v1.QueuedTransaction>} value */
proto.rpc.v1.QueueData.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rpc.v1.QueuedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpc.v1.QueuedTransaction}
 */
proto.rpc.v1.QueueData.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rpc.v1.QueuedTransaction, opt_index);
};


proto.rpc.v1.QueueData.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.v1.QueuedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.v1.QueuedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rpc.v1.QueuedTransaction.displayName = 'proto.rpc.v1.QueuedTransaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.v1.QueuedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.v1.QueuedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.v1.QueuedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.QueuedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    authChange: jspb.Message.getFieldWithDefault(msg, 1, false),
    fee: (f = msg.getFee()) && rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    feeLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxSpendDrops: (f = msg.getMaxSpendDrops()) && rpc_v1_amount_pb.XRPDropsAmount.toObject(includeInstance, f),
    sequence: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastLedgerSequence: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.v1.QueuedTransaction}
 */
proto.rpc.v1.QueuedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.v1.QueuedTransaction;
  return proto.rpc.v1.QueuedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.v1.QueuedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.v1.QueuedTransaction}
 */
proto.rpc.v1.QueuedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthChange(value);
      break;
    case 2:
      var value = new rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeLevel(value);
      break;
    case 4:
      var value = new rpc_v1_amount_pb.XRPDropsAmount;
      reader.readMessage(value,rpc_v1_amount_pb.XRPDropsAmount.deserializeBinaryFromReader);
      msg.setMaxSpendDrops(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastLedgerSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.v1.QueuedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.v1.QueuedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.v1.QueuedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.v1.QueuedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthChange();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getFeeLevel();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMaxSpendDrops();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      rpc_v1_amount_pb.XRPDropsAmount.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLastLedgerSequence();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional bool auth_change = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rpc.v1.QueuedTransaction.prototype.getAuthChange = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.rpc.v1.QueuedTransaction.prototype.setAuthChange = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional XRPDropsAmount fee = 2;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.QueuedTransaction.prototype.getFee = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.XRPDropsAmount, 2));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.QueuedTransaction.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rpc.v1.QueuedTransaction.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.QueuedTransaction.prototype.hasFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 fee_level = 3;
 * @return {number}
 */
proto.rpc.v1.QueuedTransaction.prototype.getFeeLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rpc.v1.QueuedTransaction.prototype.setFeeLevel = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional XRPDropsAmount max_spend_drops = 4;
 * @return {?proto.rpc.v1.XRPDropsAmount}
 */
proto.rpc.v1.QueuedTransaction.prototype.getMaxSpendDrops = function() {
  return /** @type{?proto.rpc.v1.XRPDropsAmount} */ (
    jspb.Message.getWrapperField(this, rpc_v1_amount_pb.XRPDropsAmount, 4));
};


/** @param {?proto.rpc.v1.XRPDropsAmount|undefined} value */
proto.rpc.v1.QueuedTransaction.prototype.setMaxSpendDrops = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.rpc.v1.QueuedTransaction.prototype.clearMaxSpendDrops = function() {
  this.setMaxSpendDrops(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.v1.QueuedTransaction.prototype.hasMaxSpendDrops = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 sequence = 5;
 * @return {number}
 */
proto.rpc.v1.QueuedTransaction.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.rpc.v1.QueuedTransaction.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 last_ledger_sequence = 6;
 * @return {number}
 */
proto.rpc.v1.QueuedTransaction.prototype.getLastLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.rpc.v1.QueuedTransaction.prototype.setLastLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.rpc.v1);
